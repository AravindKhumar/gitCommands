CHECK WHETHER GIT IS INSTALLED CORRECTLY
git -- version

CONFIGURATION OF THE ACCOUNT
git config --global user.name ' '
git config --global user.email ' '
git config --list

GET HELP FROM DOCUMENTATION
git help <verb>
git <verb> --help

INITIALISE GIT
git init
git status

EXCEPTIONS
.gitignore - add the files names in this file to ignore them during commit

STAGING AND UNSTAGING CHANGES
git add -A ; git add . - Add the files to the staging area ready to be committed
git add <file name>

git reset <file name>
git reset . - Remove the files from the staging ares

COMMITTING CHANGES TO REPOSITORY
git commit -m '<Commit Comments>'
git commit -am '<Commit Comments>'
git log - Dsiplays the information about the last commit

CLONING A REPOSITORY
git clone <url> <where to clone> - git clone https://www.github.com/nenivaqxuhzne/HomeAutomation .

GET INFORMATION ABOUT THE REPOSITORY
git remote -v - lists the info about the remote repository
git branch -a - lists all the branches of the repository

PUSHING CHANGES TO THE REPOSITORY:
Make changes to the file
git diff  - displays the changes done to the file
git status
git add -A
git status
git commit -m 'Comments for the commit'


IF THE CHANGES TO BE MADE TO THE REMOTE REPO COPY:
git pull origin master/branch - take changes to the current local code base
git push origin master/branch - make changes to the code base in remote server
 
BRANCHING:
git branch <name of the branch>
git checkout <name of the branch> 


PUSH THE CHANGES IN THE BRANCH TO REMOTE REPO:
git push -u origin <branch name>
git branch -a - all the branches

MERGE CHANGES WITH MASTER
git branch --merged - displays what all branches have been merged recently with master
git merge <branch name>

DELETE A BRANCH AFTER MERGING WITH THE MASTER:
git branch -d <branch na me>
git push origin --delete <branch name>

UNDO THE CHANGES MADE TO THE CODE BASE BEFORE STAGING/COMITTING (JUST SAVED)
git checkout <filename>

UNDO A BAD COMMIT COMMENT
git commit -amend -m '<Changed Comment>'

FORGOT TO ADD A FILE IN THE LAST COMMIT/MAKE CHANGES USING THE LAST COMMIT:
First stage the files that were left out in the previous commit
git commit -ammend
If needed make changes to the commit message and save and close the editor

IF THE COMMIT IS MADE IN THE WRONG BRANCH
First take the hash of the last commit made wrongly...
git log
Then get into the branch that the commit was to be made and do the following...
git checkout <branch name>
git cherry-pick <hash>
Now the commit is moved to the desired branch...
Not to delete the commit in master and reset it to the stage it was before doing the wrong
commit...
git reset --soft <hash> - Soft will reset to the point we need. But the modifications will be
staging area...
git reset <hash> (mixed reset bby default) - mixed will reset to the point we need. But the 
modifications will be in the working directory and not in the staging area...
git reset -hard <hash> - will completely delete the tracked changes and reset as it was in the last commit...


GET RID OF UNTRACKED CHANGES:
git clean -df   -d - untracked directories
		-f - untracked files

RECYCLING THE HARD RESET CHANGES:
git reflog - walkthough of all the git commands we had done
Take the hash before the changes was made and check it out
git checkout <hash>
git branch <branch name>
Now the detached Head will get saved at the newly created branch
Now if I checkout to master branch. The detached head branch will be garbaged and the
newly created branch will have all the lost changes...

REVERT THE BAD COMMIT
Creates a new commit to undo the changes of the branch that other people have already
pulled without affecting the history of the git...
git revert <hash>

DIFFERENCE BETWEEN TWO COMMITS
git diff <hash 1> <hash 2>

GIT STASHING
Changes that are not ready to commit, But there should be movement between the branches, temporarily save the changes...
git stash save "Message for stashing"
git stash list - gives the list of all stashes you have made
After completing all the Intermediate works, 
git stash apply <stash name>
Even after applying the stash will still be present...
Instead off "Applying" the stash
git stash pop - will aplly the first stash and delete it from the list
To drop the stashes...
git stash drop <stash name>
To drop all the stashes...
git stash clear
